-- Script de criação de views para indicadores do Sistema SaaS de Restaurante Pesqueiro
-- Banco de dados: PostgreSQL
-- Schema: restaurante_01

-- Definir o schema como padrão para as operações subsequentes
SET search_path TO restaurante_01;

------------------------------------------
-- 1. INDICADORES DE VENDAS
------------------------------------------

-- View de faturamento diário
CREATE OR REPLACE VIEW vw_faturamento_diario AS
SELECT 
    DATE(p.data_fechamento) AS data,
    COUNT(p.id) AS qtd_pedidos,
    SUM(p.valor_total) AS faturamento_total,
    ROUND(AVG(p.valor_total), 2) AS ticket_medio,
    SUM(CASE WHEN (p.valor_total > 0) THEN 1 ELSE 0 END) AS pedidos_pagos
FROM pedidos p
WHERE p.status = 'Fechado'
GROUP BY DATE(p.data_fechamento)
ORDER BY DATE(p.data_fechamento) DESC;

COMMENT ON VIEW vw_faturamento_diario IS 'Mostra o faturamento diário, quantidade de pedidos e ticket médio';

-- View de faturamento mensal
CREATE OR REPLACE VIEW vw_faturamento_mensal AS
SELECT 
    EXTRACT(YEAR FROM p.data_fechamento) AS ano,
    EXTRACT(MONTH FROM p.data_fechamento) AS mes,
    TO_CHAR(p.data_fechamento, 'Month') AS nome_mes,
    COUNT(p.id) AS qtd_pedidos,
    SUM(p.valor_total) AS faturamento_total,
    ROUND(AVG(p.valor_total), 2) AS ticket_medio
FROM pedidos p
WHERE p.status = 'Fechado'
GROUP BY 
    EXTRACT(YEAR FROM p.data_fechamento),
    EXTRACT(MONTH FROM p.data_fechamento),
    TO_CHAR(p.data_fechamento, 'Month')
ORDER BY 
    EXTRACT(YEAR FROM p.data_fechamento) DESC,
    EXTRACT(MONTH FROM p.data_fechamento) DESC;

COMMENT ON VIEW vw_faturamento_mensal IS 'Mostra o faturamento mensal, quantidade de pedidos e ticket médio';

-- View de produtos mais vendidos
CREATE OR REPLACE VIEW vw_produtos_mais_vendidos AS
SELECT 
    p.id AS produto_id,
    p.nome AS produto_nome,
    c.nome AS categoria,
    SUM(ip.quantidade) AS quantidade_vendida,
    SUM(ip.valor_total) AS valor_total_vendido,
    COUNT(DISTINCT ip.pedido_id) AS qtd_pedidos,
    ROUND(AVG(ip.preco_unitario), 2) AS preco_medio
FROM itens_pedido ip
JOIN produtos p ON ip.produto_id = p.id
JOIN categorias c ON p.categoria_id = c.id
JOIN pedidos pd ON ip.pedido_id = pd.id
WHERE pd.status = 'Fechado'
GROUP BY p.id, p.nome, c.nome
ORDER BY quantidade_vendida DESC;

COMMENT ON VIEW vw_produtos_mais_vendidos IS 'Mostra os produtos mais vendidos com quantidade, valor e frequência';

-- View de vendas por forma de pagamento
CREATE OR REPLACE VIEW vw_vendas_por_forma_pagamento AS
SELECT 
    fp.nome AS forma_pagamento,
    COUNT(pg.id) AS qtd_pagamentos,
    SUM(pg.valor) AS valor_total,
    ROUND((SUM(pg.valor) / (SELECT SUM(valor) FROM pagamentos)) * 100, 2) AS percentual
FROM pagamentos pg
JOIN formas_pagamento fp ON pg.forma_pagamento_id = fp.id
GROUP BY fp.nome
ORDER BY valor_total DESC;

COMMENT ON VIEW vw_vendas_por_forma_pagamento IS 'Mostra as vendas agrupadas por forma de pagamento';

-- View de vendas por categoria de produto
CREATE OR REPLACE VIEW vw_vendas_por_categoria AS
SELECT 
    c.nome AS categoria,
    COUNT(DISTINCT ip.pedido_id) AS qtd_pedidos,
    SUM(ip.quantidade) AS quantidade_vendida,
    SUM(ip.valor_total) AS valor_total,
    ROUND((SUM(ip.valor_total) / (
        SELECT SUM(valor_total) FROM itens_pedido ip2
        JOIN pedidos pd2 ON ip2.pedido_id = pd2.id
        WHERE pd2.status = 'Fechado'
    )) * 100, 2) AS percentual_vendas
FROM itens_pedido ip
JOIN produtos p ON ip.produto_id = p.id
JOIN categorias c ON p.categoria_id = c.id
JOIN pedidos pd ON ip.pedido_id = pd.id
WHERE pd.status = 'Fechado'
GROUP BY c.nome
ORDER BY valor_total DESC;

COMMENT ON VIEW vw_vendas_por_categoria IS 'Mostra as vendas agrupadas por categoria de produto';

-- View de vendas por hora do dia
CREATE OR REPLACE VIEW vw_vendas_por_hora AS
SELECT 
    EXTRACT(HOUR FROM p.data_pedido) AS hora,
    COUNT(p.id) AS qtd_pedidos,
    SUM(p.valor_total) AS valor_total,
    ROUND(AVG(p.valor_total), 2) AS ticket_medio
FROM pedidos p
WHERE p.status = 'Fechado'
GROUP BY EXTRACT(HOUR FROM p.data_pedido)
ORDER BY EXTRACT(HOUR FROM p.data_pedido);

COMMENT ON VIEW vw_vendas_por_hora IS 'Mostra as vendas distribuídas por hora do dia';

-- View de vendas por dia da semana
CREATE OR REPLACE VIEW vw_vendas_por_dia_semana AS
SELECT 
    EXTRACT(DOW FROM p.data_pedido) AS dia_semana_num,
    CASE EXTRACT(DOW FROM p.data_pedido)
        WHEN 0 THEN 'Domingo'
        WHEN 1 THEN 'Segunda-feira'
        WHEN 2 THEN 'Terça-feira'
        WHEN 3 THEN 'Quarta-feira'
        WHEN 4 THEN 'Quinta-feira'
        WHEN 5 THEN 'Sexta-feira'
        WHEN 6 THEN 'Sábado'
    END AS dia_semana,
    COUNT(p.id) AS qtd_pedidos,
    SUM(p.valor_total) AS valor_total,
    ROUND(AVG(p.valor_total), 2) AS ticket_medio
FROM pedidos p
WHERE p.status = 'Fechado'
GROUP BY EXTRACT(DOW FROM p.data_pedido)
ORDER BY EXTRACT(DOW FROM p.data_pedido);

COMMENT ON VIEW vw_vendas_por_dia_semana IS 'Mostra as vendas distribuídas por dia da semana';

------------------------------------------
-- 2. INDICADORES DE MESAS E OCUPAÇÃO
------------------------------------------

-- View de ocupação de mesas
CREATE OR REPLACE VIEW vw_ocupacao_mesas AS
SELECT 
    COUNT(*) AS total_mesas,
    SUM(CASE WHEN status = 'Livre' THEN 1 ELSE 0 END) AS mesas_livres,
    SUM(CASE WHEN status = 'Ocupada' THEN 1 ELSE 0 END) AS mesas_ocupadas,
    SUM(CASE WHEN status = 'Reservada' THEN 1 ELSE 0 END) AS mesas_reservadas,
    ROUND((SUM(CASE WHEN status <> 'Livre' THEN 1 ELSE 0 END)::NUMERIC / COUNT(*)) * 100, 2) AS taxa_ocupacao
FROM mesas
WHERE ativa = true;

COMMENT ON VIEW vw_ocupacao_mesas IS 'Mostra a ocupação atual das mesas e taxa de ocupação';

-- View de tempo médio de permanência nas mesas
CREATE OR REPLACE VIEW vw_tempo_medio_permanencia AS
SELECT 
    m.numero AS mesa,
    COUNT(p.id) AS qtd_pedidos,
    ROUND(AVG(EXTRACT(EPOCH FROM (p.data_fechamento - p.data_pedido)) / 3600), 2) AS horas_media_permanencia,
    ROUND(MIN(EXTRACT(EPOCH FROM (p.data_fechamento - p.data_pedido)) / 3600), 2) AS menor_permanencia,
    ROUND(MAX(EXTRACT(EPOCH FROM (p.data_fechamento - p.data_pedido)) / 3600), 2) AS maior_permanencia
FROM pedidos p
JOIN mesas m ON p.mesa_id = m.id
WHERE p.status = 'Fechado' AND p.data_fechamento IS NOT NULL
GROUP BY m.numero
ORDER BY horas_media_permanencia DESC;

COMMENT ON VIEW vw_tempo_medio_permanencia IS 'Mostra o tempo médio de permanência dos clientes em cada mesa';

-- View de faturamento por mesa
CREATE OR REPLACE VIEW vw_faturamento_por_mesa AS
SELECT 
    m.numero AS mesa,
    COUNT(p.id) AS qtd_pedidos,
    SUM(p.valor_total) AS valor_total,
    ROUND(AVG(p.valor_total), 2) AS ticket_medio,
    MAX(p.valor_total) AS maior_pedido,
    ROUND(SUM(p.valor_total) / NULLIF(SUM(EXTRACT(EPOCH FROM (p.data_fechamento - p.data_pedido)) / 3600), 0), 2) AS valor_hora
FROM pedidos p
JOIN mesas m ON p.mesa_id = m.id
WHERE p.status = 'Fechado'
GROUP BY m.numero
ORDER BY valor_total DESC;

COMMENT ON VIEW vw_faturamento_por_mesa IS 'Mostra o faturamento, quantidade de pedidos e ticket médio por mesa';

-- View de reservas futuras
CREATE OR REPLACE VIEW vw_reservas_futuras AS
SELECT 
    r.id AS reserva_id,
    m.numero AS mesa,
    r.cliente_nome,
    r.cliente_telefone,
    r.data_reserva,
    r.hora_inicio,
    r.hora_fim,
    r.num_pessoas,
    r.observacao,
    u.nome AS usuario_responsavel
FROM reservas r
JOIN mesas m ON r.mesa_id = m.id
JOIN usuarios u ON r.usuario_id = u.id
WHERE r.status = 'Confirmada' AND (r.data_reserva > CURRENT_DATE OR (r.data_reserva = CURRENT_DATE AND r.hora_inicio > CURRENT_TIME))
ORDER BY r.data_reserva, r.hora_inicio;

COMMENT ON VIEW vw_reservas_futuras IS 'Mostra as reservas futuras confirmadas';

------------------------------------------
-- 3. INDICADORES DE ESTOQUE
------------------------------------------

-- View de produtos com estoque baixo
CREATE OR REPLACE VIEW vw_produtos_estoque_baixo AS
SELECT 
    p.id AS produto_id,
    p.codigo,
    p.nome,
    c.nome AS categoria,
    p.estoque_atual,
    p.estoque_minimo,
    p.estoque_atual - p.estoque_minimo AS diferenca,
    um.simbolo AS unidade,
    ROUND((p.estoque_atual / NULLIF(p.estoque_minimo, 0)) * 100, 2) AS percentual_estoque
FROM produtos p
JOIN categorias c ON p.categoria_id = c.id
JOIN unidades_medida um ON p.unidade_medida_id = um.id
WHERE p.controlado_estoque = true AND p.estoque_atual <= p.estoque_minimo
ORDER BY percentual_estoque ASC;

COMMENT ON VIEW vw_produtos_estoque_baixo IS 'Mostra produtos com estoque abaixo ou igual ao mínimo';

-- View de movimentação de estoque
CREATE OR REPLACE VIEW vw_movimentacao_estoque AS
SELECT 
    p.id AS produto_id,
    p.codigo,
    p.nome,
    c.nome AS categoria,
    SUM(CASE WHEN tipo = 'entrada' THEN quantidade ELSE 0 END) AS entradas,
    SUM(CASE WHEN tipo = 'saida' THEN quantidade ELSE 0 END) AS saidas,
    SUM(CASE WHEN tipo = 'entrada' THEN quantidade ELSE -quantidade END) AS saldo,
    p.estoque_atual AS estoque_atual
FROM (
    -- Entradas de estoque
    SELECT 
        produto_id, 
        quantidade, 
        'entrada' AS tipo,
        data_entrada AS data
    FROM entradas_estoque
    UNION ALL
    -- Saídas de estoque
    SELECT 
        produto_id, 
        quantidade, 
        'saida' AS tipo,
        data_saida AS data
    FROM saidas_estoque
    UNION ALL
    -- Saídas por pedidos
    SELECT 
        ip.produto_id, 
        ip.quantidade, 
        'saida' AS tipo,
        ip.data_pedido AS data
    FROM itens_pedido ip
    JOIN pedidos p ON ip.pedido_id = p.id
    JOIN produtos pr ON ip.produto_id = pr.id
    WHERE p.status = 'Fechado' AND pr.controlado_estoque = true
) AS movimentos
JOIN produtos p ON movimentos.produto_id = p.id
JOIN categorias c ON p.categoria_id = c.id
WHERE p.controlado_estoque = true
GROUP BY p.id, p.codigo, p.nome, c.nome, p.estoque_atual
ORDER BY saidas DESC;

COMMENT ON VIEW vw_movimentacao_estoque IS 'Mostra a movimentação de estoque (entradas e saídas) por produto';

-- View de giro de estoque
CREATE OR REPLACE VIEW vw_giro_estoque AS
WITH vendas_mensais AS (
    SELECT 
        ip.produto_id,
        SUM(ip.quantidade) AS quantidade_vendida,
        EXTRACT(YEAR FROM p.data_fechamento) AS ano,
        EXTRACT(MONTH FROM p.data_fechamento) AS mes
    FROM itens_pedido ip
    JOIN pedidos p ON ip.pedido_id = p.id
    JOIN produtos pr ON ip.produto_id = pr.id
    WHERE p.status = 'Fechado' AND pr.controlado_estoque = true
    GROUP BY ip.produto_id, EXTRACT(YEAR FROM p.data_fechamento), EXTRACT(MONTH FROM p.data_fechamento)
)
SELECT 
    p.id AS produto_id,
    p.codigo,
    p.nome,
    c.nome AS categoria,
    p.estoque_atual,
    COALESCE(AVG(vm.quantidade_vendida), 0) AS media_vendas_mensais,
    CASE 
        WHEN COALESCE(AVG(vm.quantidade_vendida), 0) = 0 THEN 0
        ELSE ROUND(p.estoque_atual / COALESCE(AVG(vm.quantidade_vendida), 1), 2)
    END AS meses_duracao_estoque,
    CASE 
        WHEN COALESCE(AVG(vm.quantidade_vendida), 0) = 0 THEN 0
        ELSE ROUND(COALESCE(AVG(vm.quantidade_vendida), 0) / NULLIF(p.estoque_atual, 0), 2)
    END AS indice_giro_mensal
FROM produtos p
LEFT JOIN vendas_mensais vm ON p.id = vm.produto_id
JOIN categorias c ON p.categoria_id = c.id
WHERE p.controlado_estoque = true
GROUP BY p.id, p.codigo, p.nome, c.nome, p.estoque_atual
ORDER BY indice_giro_mensal DESC;

COMMENT ON VIEW vw_giro_estoque IS 'Calcula o giro de estoque dos produtos e o tempo estimado de duração do estoque atual';

------------------------------------------
-- 4. INDICADORES FINANCEIROS
------------------------------------------

-- View de lucratividade por produto
CREATE OR REPLACE VIEW vw_lucratividade_produto AS
SELECT 
    p.id AS produto_id,
    p.codigo,
    p.nome,
    c.nome AS categoria,
    p.preco_custo,
    p.preco_venda,
    p.preco_venda - p.preco_custo AS lucro_bruto,
    ROUND((p.preco_venda - p.preco_custo) / NULLIF(p.preco_venda, 0) * 100, 2) AS margem_lucro,
    SUM(ip.quantidade) AS quantidade_vendida,
    SUM((ip.preco_unitario - p.preco_custo) * ip.quantidade) AS lucro_total
FROM produtos p
LEFT JOIN itens_pedido ip ON p.id = ip.produto_id
LEFT JOIN pedidos pd ON ip.pedido_id = pd.id
JOIN categorias c ON p.categoria_id = c.id
WHERE pd.status = 'Fechado' OR pd.status IS NULL
GROUP BY p.id, p.codigo, p.nome, c.nome, p.preco_custo, p.preco_venda
ORDER BY lucro_total DESC NULLS LAST;

COMMENT ON VIEW vw_lucratividade_produto IS 'Mostra a lucratividade por produto, incluindo margem de lucro e lucro total';

-- View de fluxo de caixa
CREATE OR REPLACE VIEW vw_fluxo_caixa AS
SELECT 
    DATE(data_movimento) AS data,
    SUM(CASE WHEN tipo = 'Entrada' THEN valor ELSE 0 END) AS entradas,
    SUM(CASE WHEN tipo = 'Saída' THEN valor ELSE 0 END) AS saidas,
    SUM(CASE WHEN tipo = 'Entrada' THEN valor ELSE -valor END) AS saldo_dia
FROM movimentacoes_financeiras
GROUP BY DATE(data_movimento)
ORDER BY DATE(data_movimento) DESC;

COMMENT ON VIEW vw_fluxo_caixa IS 'Mostra o fluxo de caixa diário com entradas, saídas e saldo';

-- View de contas a pagar vencidas
CREATE OR REPLACE VIEW vw_contas_pagar_vencidas AS
SELECT 
    id AS conta_id,
    descricao,
    valor,
    data_vencimento,
    CURRENT_DATE - data_vencimento AS dias_vencida,
    fornecedor_id,
    COALESCE((SELECT nome FROM fornecedores WHERE id = fornecedor_id), 'N/A') AS fornecedor,
    numero_documento,
    observacao
FROM contas_pagar
WHERE status = 'Pendente' AND data_vencimento < CURRENT_DATE
ORDER BY data_vencimento;

COMMENT ON VIEW vw_contas_pagar_vencidas IS 'Mostra as contas a pagar vencidas';

-- View de contas a receber vencidas
CREATE OR REPLACE VIEW vw_contas_receber_vencidas AS
SELECT 
    id AS conta_id,
    descricao,
    cliente_nome,
    valor,
    data_vencimento,
    CURRENT_DATE - data_vencimento AS dias_vencida,
    numero_documento,
    observacao
FROM contas_receber
WHERE status = 'Pendente' AND data_vencimento < CURRENT_DATE
ORDER BY data_vencimento;

COMMENT ON VIEW vw_contas_receber_vencidas IS 'Mostra as contas a receber vencidas';

-- View de resultado financeiro por período
CREATE OR REPLACE VIEW vw_resultado_financeiro AS
WITH receitas AS (
    SELECT 
        EXTRACT(YEAR FROM data_movimento) AS ano,
        EXTRACT(MONTH FROM data_movimento) AS mes,
        TO_CHAR(data_movimento, 'Month') AS nome_mes,
        SUM(valor) AS total_receitas
    FROM movimentacoes_financeiras
    WHERE tipo = 'Entrada'
    GROUP BY 
        EXTRACT(YEAR FROM data_movimento),
        EXTRACT(MONTH FROM data_movimento),
        TO_CHAR(data_movimento, 'Month')
),
despesas AS (
    SELECT 
        EXTRACT(YEAR FROM data_movimento) AS ano,
        EXTRACT(MONTH FROM data_movimento) AS mes,
        TO_CHAR(data_movimento, 'Month') AS nome_mes,
        SUM(valor) AS total_despesas
    FROM movimentacoes_financeiras
    WHERE tipo = 'Saída'
    GROUP BY 
        EXTRACT(YEAR FROM data_movimento),
        EXTRACT(MONTH FROM data_movimento),
        TO_CHAR(data_movimento, 'Month')
)
SELECT 
    r.ano,
    r.mes,
    r.nome_mes,
    COALESCE(r.total_receitas, 0) AS total_receitas,
    COALESCE(d.total_despesas, 0) AS total_despesas,
    COALESCE(r.total_receitas, 0) - COALESCE(d.total_despesas, 0) AS resultado,
    CASE 
        WHEN COALESCE(d.total_despesas, 0) = 0 THEN NULL
        ELSE ROUND((COALESCE(r.total_receitas, 0) / COALESCE(d.total_despesas, 1)) * 100, 2)
    END AS cobertura_despesas
FROM receitas r
FULL OUTER JOIN despesas d ON r.ano = d.ano AND r.mes = d.mes
ORDER BY r.ano DESC, r.mes DESC;

COMMENT ON VIEW vw_resultado_financeiro IS 'Mostra o resultado financeiro mensal (receitas, despesas e resultado)';

------------------------------------------
-- 5. INDICADORES OPERACIONAIS
------------------------------------------

-- View de desempenho de atendimento
CREATE OR REPLACE VIEW vw_desempenho_atendimento AS
SELECT 
    u.id AS usuario_id,
    u.nome AS garcom,
    COUNT(DISTINCT p.id) AS qtd_pedidos,
    ROUND(AVG(EXTRACT(EPOCH FROM (p.data_fechamento - p.data_pedido)) / 60), 2) AS tempo_medio_atendimento_min,
    SUM(p.valor_total) AS valor_total_vendido,
    ROUND(AVG(p.valor_total), 2) AS ticket_medio,
    ROUND(SUM(p.valor_total) / COUNT(DISTINCT p.id), 2) AS valor_medio_pedido
FROM pedidos p
JOIN usuarios u ON p.usuario_abertura = u.id
JOIN usuarios_perfis up ON u.id = up.usuario_id
WHERE p.status = 'Fechado' AND up.perfil_id = 3 -- Perfil de Garçom
GROUP BY u.id, u.nome
ORDER BY valor_total_vendido DESC;

COMMENT ON VIEW vw_desempenho_atendimento IS 'Mostra o desempenho de atendimento por garçom, incluindo quantidade de pedidos e valor vendido';

-- View de tempo de preparo na cozinha
CREATE OR REPLACE VIEW vw_tempo_preparo_cozinha AS
SELECT 
    p.nome AS produto,
    c.nome AS categoria,
    COUNT(ip.id) AS quantidade_pedidos,
    ROUND(AVG(EXTRACT(EPOCH FROM (ip.data_preparo - ip.data_pedido)) / 60), 2) AS tempo_medio_preparo_min,
    MIN(EXTRACT(EPOCH FROM (ip.data_preparo - ip.data_pedido)) / 60) AS tempo_minimo_min,
    MAX(EXTRACT(EPOCH FROM (ip.data_preparo - ip.data_pedido)) / 60) AS tempo_maximo_min
FROM itens_pedido ip
JOIN produtos p ON ip.produto_id = p.id
JOIN categorias c ON p.categoria_id = c.id
WHERE ip.data_preparo IS NOT NULL
GROUP BY p.nome, c.nome
ORDER BY tempo_medio_preparo_min DESC;

COMMENT ON VIEW vw_tempo_preparo_cozinha IS 'Mostra o tempo médio de preparo dos produtos na cozinha';

-- View de status de pedidos atuais
CREATE OR REPLACE VIEW vw_status_pedidos_atuais AS
SELECT 
    p.status,
    COUNT(p.id) AS qtd_pedidos,
    SUM(p.valor_subtotal) AS valor_total,
    ROUND(AVG(EXTRACT(EPOCH FROM (CURRENT_TIMESTAMP - p.data_pedido)) / 60), 2) AS tempo_medio_atual_min
FROM pedidos p
WHERE p.status NOT IN ('Fechado', 'Cancelado')
GROUP BY p.status
ORDER BY COUNT(p.id) DESC;

COMMENT ON VIEW vw_status_pedidos_atuais IS 'Mostra a quantidade de pedidos em cada status (não finalizados)';

------------------------------------------
-- 6. INDICADORES DE RECURSOS HUMANOS
------------------------------------------

-- View de escala de trabalho atual
CREATE OR REPLACE VIEW vw_escala_trabalho_atual AS
SELECT 
    f.nome AS funcionario,
    f.cargo,
    e.nome AS escala,
    fe.dia_semana,
    CASE fe.dia_semana
        WHEN 0 THEN 'Domingo'
        WHEN 1 THEN 'Segunda-feira'
        WHEN 2 THEN 'Terça-feira'
        WHEN 3 THEN 'Quarta-feira'
        WHEN 4 THEN 'Quinta-feira'
        WHEN 5 THEN 'Sexta-feira'
        WHEN 6 THEN 'Sábado'
    END AS dia_semana_nome,
    fe.hora_inicio,
    fe.hora_fim,
    TO_CHAR(fe.hora_inicio, 'HH24:MI') || ' - ' || TO_CHAR(fe.hora_fim, 'HH24:MI') AS horario,
    EXTRACT(EPOCH FROM (fe.hora_fim - fe.hora_inicio)) / 3600 AS horas_trabalho
FROM funcionarios_escalas fe
JOIN funcionarios f ON fe.funcionario_id = f.id
JOIN escalas e ON fe.escala_id = e.id
WHERE fe.data_fim IS NULL OR fe.data_fim >= CURRENT_DATE
ORDER BY fe.dia_semana, fe.hora_inicio, f.nome;

COMMENT ON VIEW vw_escala_trabalho_atual IS 'Mostra a escala de trabalho atual dos funcionários';

-- View de ponto do dia
CREATE OR REPLACE VIEW vw_registro_ponto_hoje AS
SELECT 
    f.nome AS funcionario,
    f.cargo,
    rh.hora_entrada,
    rh.hora_saida,
    CASE 
        WHEN rh.hora_saida IS NULL THEN 'Em trabalho'
        ELSE 'Finalizado'
    END AS status,
    CASE 
        WHEN rh.hora_saida IS NULL THEN EXTRACT(EPOCH FROM (CURRENT_TIME - rh.hora_entrada)) / 3600
        ELSE EXTRACT(EPOCH FROM (rh.hora_saida - rh.hora_entrada)) / 3600
    END AS horas_trabalhadas
FROM registro_horas rh
JOIN funcionarios f ON rh.funcionario_id = f.id
WHERE rh.data = CURRENT_DATE
ORDER BY rh.hora_entrada;

COMMENT ON VIEW vw_registro_ponto_hoje IS 'Mostra o registro de ponto dos funcionários para o dia atual';

-- View de horas trabalhadas por funcionário
CREATE OR REPLACE VIEW vw_horas_trabalhadas AS
SELECT 
    f.id AS funcionario_id,
    f.nome AS funcionario,
    f.cargo,
    EXTRACT(MONTH FROM rh.data) AS mes,
    EXTRACT(YEAR FROM rh.data) AS ano,
    COUNT(rh.id) AS dias_trabalhados,
    SUM(
        CASE 
            WHEN rh.hora_saida IS NULL THEN EXTRACT(EPOCH FROM (CURRENT_TIME - rh.hora_entrada))
            ELSE EXTRACT(EPOCH FROM (rh.hora_saida - rh.hora_entrada))
        END
    ) / 3600 AS total_horas,
    ROUND(AVG(
        CASE 
            WHEN rh.hora_saida IS NULL THEN EXTRACT(EPOCH FROM (CURRENT_TIME - rh.hora_entrada))
            ELSE EXTRACT(EPOCH FROM (rh.hora_saida - rh.hora_entrada))
        END
    ) / 3600, 2) AS media_horas_dia
FROM registro_horas rh
JOIN funcionarios f ON rh.funcionario_id = f.id
WHERE rh.data >= DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '3 months'
GROUP BY f.id, f.nome, f.cargo, EXTRACT(MONTH FROM rh.data), EXTRACT(YEAR FROM rh.data)
ORDER BY EXTRACT(YEAR FROM rh.data) DESC, EXTRACT(MONTH FROM rh.data) DESC, total_horas DESC;

COMMENT ON VIEW vw_horas_trabalhadas IS 'Mostra o total de horas trabalhadas por funcionário nos últimos meses';
